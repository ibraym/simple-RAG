name: CI
on:
  push:
    branches:
      - 'master'
      - 'develop'
  pull_request:
    types: [ready_for_review, opened, synchronize, reopened]
    paths-ignore:
      - '**/*.md'

env:
  SIMPLE_RAG_VERSION: "local"

jobs:
  search_cache:
    if: |
      github.event.pull_request.draft == false &&
      !startsWith(github.event.pull_request.title, '[WIP]') &&
      !startsWith(github.event.pull_request.title, '[Dependent]')
    uses: ./.github/workflows/search-cache.yml

  build:
    needs: search_cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: backend server. Getting cache from the default branch
        uses: actions/cache@v3
        with:
          path: /tmp/backend_server_cache_server
          key: ${{ runner.os }}-build-server-${{ needs.search_cache.outputs.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create artifact directories
        run: |
          mkdir /tmp/backend_server

      - name: backend server. Build and push
        uses: docker/build-push-action@v3
        with:
          build-args: |
              "COVERAGE_PROCESS_START=.coveragerc"
          cache-from: type=local,src=/tmp/backend_server_cache_server
          context: .
          file: Dockerfile.ci
          tags: ibrym/backend_server
          outputs: type=docker,dest=/tmp/backend_server/image.tar

      - name: Verify API schema
        id: verify_schema
        run: |
          docker load --input /tmp/backend_server/image.tar
          docker run --rm --entrypoint /bin/bash ibrym/backend_server \
            -c 'python manage.py spectacular' > simple_rag/schema-expected.yml

          if ! git diff --no-index simple_rag/schema.yml simple_rag/schema-expected.yml; then
            echo
            echo 'API schema has changed! Please update simple_rag/schema.yml:'
            echo
            echo '  docker run --rm --entrypoint /bin/bash ibrym/backend_server:dev \'
            echo "    -c 'python manage.py spectacular' > simple_rag/schema.yml"
            exit 1
          fi

      - name: Upload SIMPLE_RAG server artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend_server
          path: /tmp/backend_server/image.tar

  unit_testing:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download SIMPLE_RAG server image
        uses: actions/download-artifact@v3
        with:
          name: backend_server
          path: /tmp/backend_server/

      - name: Load Docker images
        run: |
          docker load --input /tmp/backend_server/image.tar
          docker tag ibraym/backend_server:latest ibraym/backend_server:${SIMPLE_RAG_VERSION}
          docker image ls -a

      - name: Running unit tests
        env:
          HOST_COVERAGE_DATA_DIR: ${{ github.workspace }}
          CONTAINER_COVERAGE_DATA_DIR: "/coverage_data"
        run: |
          docker compose -f docker-compose.yml -f docker-compose.dev.yml up -d backend_server

          docker compose -f docker-compose.yml -f docker-compose.dev.yml -f docker-compose.ci.yml run ci /bin/bash \
            -c 'coverage run -a manage.py test simple_rag/apps && coverage json && mv coverage.json ${CONTAINER_COVERAGE_DATA_DIR}/unit_tests_coverage.json'

      - name: Uploading code coverage results as an artifact
        uses: actions/upload-artifact@v3.1.1
        with:
          name: coverage_results
          path: |
            ${{ github.workspace }}/coverage-final.json
            ${{ github.workspace }}/unit_tests_coverage.json

      - name: Creating a log file from simple_rag containers
        if: failure()
        env:
          LOGS_DIR: "${{ github.workspace }}/unit_testing"
        run: |
            mkdir $LOGS_DIR
            docker logs backend_server > $LOGS_DIR/backend_server.log

      - name: Uploading "simple_rag" container logs as an artifact
        if: failure()
        uses: actions/upload-artifact@v3.1.1
        with:
          name: unit_tests_container_logs
          path: "${{ github.workspace }}/unit_testing"

  codecov:
    runs-on: ubuntu-latest
    needs: [unit_testing]
    steps:
      - uses: actions/checkout@v3

      - name: Downloading coverage results
        uses: actions/download-artifact@v3
        with:
          name: coverage_results

      - name: Upload coverage reports to Codecov with GitHub Action
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}